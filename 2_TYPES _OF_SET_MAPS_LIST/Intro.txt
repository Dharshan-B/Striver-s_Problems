The Introduction to the maps and the sets for the purpose of the DSA  :

üî∑ SET INTERFACE

A Set is a collection that does not allow duplicate elements. Java provides several implementations:

| Class             | Ordering                               | Performance Characteristics                 | Use Case in DSA                                                 |
| ----------------- | -------------------------------------- | ------------------------------------------- | --------------------------------------------------------------- |
| **HashSet**       | ‚ùå Unordered                            | O(1) average time for add, remove, contains | - Fast existence check<br>- Remove duplicates from array        |
| **LinkedHashSet** | ‚úÖ Maintains insertion order            | Slightly slower than HashSet                | - Preserve order + uniqueness                                   |
| **TreeSet**       | ‚úÖ Sorted (natural order or comparator) | O(log n) for operations                     | - Sorted unique values<br>- Range queries (e.g., floor/ceiling) |

‚úÖ Example Use Cases of Sets in DSA:

Detecting Duplicates: HashSet for checking if an element already exists.
Finding Union/Intersection: Set operations for combining arrays/lists.
Sliding Window: Uniqueness check within a window using HashSet.
TreeSet: Use in problems involving range lookups, closest elements.

// Example: Check for duplicates
Set<Integer> set = new HashSet<>();
for (int num : nums) {
    if (set.contains(num)) return true;
    set.add(num);
}

üî∑ MAP INTERFACE
A Map is an object that maps keys to values (key-value pairs). Common implementations:

| Class             | Ordering                    | Performance       | Use Case in DSA                                |
| ----------------- | --------------------------- | ----------------- | ---------------------------------------------- |
| **HashMap**       | ‚ùå Unordered                 | O(1) average time | - Frequency counters<br>- Index mapping        |
| **LinkedHashMap** | ‚úÖ Maintains insertion order | Slightly slower   | - LRU cache or ordered mapping                 |
| **TreeMap**       | ‚úÖ Sorted by keys            | O(log n) time     | - Range queries on keys<br>- Ceiling/floor key |

‚úÖ Example Use Cases of Maps in DSA:

Counting Frequencies: Use HashMap to count elements in arrays/strings.
Index Mapping: Store index of values for constant-time lookup.
Caching: Use LinkedHashMap to build LRU cache.
TreeMap: Useful in problems involving ordered keys, floor/ceiling.

// Example: Frequency Counter
Map<Character, Integer> freq = new HashMap<>();
for (char c : str.toCharArray()) {
    freq.put(c, freq.getOrDefault(c, 0) + 1);
}

| Problem Type                    | Recommended Java Class |
| ------------------------------- | ---------------------- |
| Check duplicates                | `HashSet`              |
| Maintain unique & sorted values | `TreeSet`              |
| Element frequency count         | `HashMap`              |
| Key-value sorted map            | `TreeMap`              |
| LRU cache                       | `LinkedHashMap`        |
| Fast element lookups            | `HashSet` / `HashMap`  |

üöÄ Example DSA Problems:

Two Sum ‚Äì HashMap
Longest Substring Without Repeating Characters ‚Äì HashSet
Top K Frequent Elements ‚Äì HashMap + PriorityQueue
Group Anagrams ‚Äì HashMap
Sliding Window Maximum ‚Äì TreeMap or Deque

üß† RECOMMENDED STRATEGY
| Scenario                                  | Use Map/Set? | Why                     |
| ----------------------------------------- | ------------ | ----------------------- |
| Need to **check existence**               | ‚úÖ Yes        | `Set` gives O(1) lookup |
| Need to **store frequency/count**         | ‚úÖ Yes        | `Map` is ideal          |
| Need to maintain **order + uniqueness**   | ‚úÖ Yes        | `LinkedHashSet`         |
| Need to **sort + query efficiently**      | ‚úÖ Yes        | `TreeMap` / `TreeSet`   |
| Input size is **very small**              | ‚ùå Not needed | Simpler brute-force ok  |
| Problem is about **indexes or positions** | ‚ö†Ô∏è Maybe     | Arrays may be better    |


